import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score,
f1_score
from sklearn.svm import SVC


1. Load dataset
data = pd.read_csv('Ex3.csv')


2. Handling missing values (if any)
data.fillna(method='ffill', inplace=True)


3. Encoding categorical variables
le = LabelEncoder()
data['Gender'] = le.fit_transform(data['Gender'])


4. Splitting the dataset into the Training set and Test set
X = data.drop('Purchase', axis=1)
y = data['Purchase']


5. Feature scaling
sc = StandardScaler()
X_scaled = sc.fit_transform(X)


6. Define SVM classifiers
classifiers = {
'Linear SVM': SVC(kernel='linear', random_state=0),
'Polynomial SVM': SVC(kernel='poly', degree=3, random_state=0),
'RBF SVM': SVC(kernel='rbf', random_state=0)
}


7. Evaluate each classifier using k-fold cross-validation
for clf_name, clf in classifiers.items():
scores = cross_val_score(clf, X_scaled, y, cv=5, scoring='accuracy')
print(f"{clf_name} Cross-Validation Accuracy: {scores.mean():.2f} (+/- {scores.std() * 2:.2f})")


8. Train a selected SVM model (e.g., Linear SVM) on the entire
dataset
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.25, random_state=0)
classifier = SVC(kernel='linear', random_state=0)
classifier.fit(X_train, y_train)


9. Make Predictions
y_pred = classifier.predict(X_test)


10. Performance Evaluation
cm = confusion_matrix(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
print(f"Performance Score: {f1:.2f}")

